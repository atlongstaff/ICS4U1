import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.Arrays;
import java.util.Random;

public class Racquetone {
	private static final int Y = 330;
	private static final int WIDTH = 60;
	private static final int HEIGHT = 10;
	int x = 0;
	int xa = 0;
	double epsilon = 0.1;
	Random r = new Random();

    
	private Gamemain Gamemain;

	public Racquetone(Gamemain Gamemain) {
		this.Gamemain = Gamemain;
	}

	public void move() {
		int Speed = 2;
		if (Neuralnetwork() == 1)
			xa = -Speed;
		if (Neuralnetwork() == -1)
			xa = Speed;
		
		if (x + xa > 0 && x + xa < Gamemain.getWidth() - WIDTH)
			x = x + xa;
	}

	public void paint(Graphics2D g) {
		g.fillRect(x, Y, WIDTH, HEIGHT);
	}


	
	public double[][] randomizeweights(){
		double weights[][] = new double[4][4];
	     for (int i = 0; i < weights.length -1; i++) 
	     {
	        for (int j = 0; j < weights[i].length ; j++) 
	        {
	        	double result = r.nextInt(100-(-100)) -100;
	        	weights[i][j] = result / 100 ;
	        }
	     }
		return weights;	
	}
	double[][] weights = randomizeweights();
	
	
	public double[][] Trainweights(){
		x=0;
		int session = Gamemain.ball.sessioncounter();
		int[] Score1 = Gamemain.ball.getScore1();
		int[] Score2 = Gamemain.ball.getScore2();

		if( Score1[session]  < Score2[session])//if score got worse
		{
			for (int i = 0; i < weights.length -1; i++) 
		     {
		        for (int j = 0; j < weights[i].length ; j++) 
		        {
		        	double random = new Random().nextDouble();

		        	weights[i][j] = weights[i][j] + (-1*epsilon) + (random * (epsilon - (-1*epsilon) ));
		        }
		     }
		}
		
		else if(Score1[session] > Score2[session]) //if score got better
		{
			for (int i = 0; i < weights.length -1; i++) 
		     {
		        for (int j = 0; j < weights[i].length ; j++) 
		        {
		         	double random = new Random().nextDouble();

		        	weights[i][j] = weights[i][j] + (-1*epsilon) + (random * (epsilon - (-1*epsilon) ));
		        }
		     }	
		}
		if(epsilon - 0.00005 >= 0) {
			epsilon -= 0.00005;
		}
		System.out.println("Score1[session] "+ Score1[session] );
		System.out.println("Score2[session] "+ Score2[session] );

		System.out.println(Arrays.deepToString(weights));
		return weights;		
	}
	
	
	
	public double dot(double inputs[], double weights[]) {
		double p =0;
		for(int i=0; i< inputs.length -1; i++) 
		{
			p = p+ inputs[i] *weights[i];
		}
		return p;
	}

	public double sigmoid(double alpha) {
		double e =2.71828182; 
		return 1/(1+Math.pow(e,alpha));
		
	}
	
	
	
	
	
	public int Neuralnetwork() {
		double[] inputs = {Gamemain.ball.getX() , Gamemain.ball.getY(),  1};
	    //System.out.println(Arrays.deepToString(weights));
//		System.out.println(Arrays.toString(inputs));
//		System.out.println(Arrays.toString(weights[0]));

		double alpha1 = dot(inputs, weights[0]);
		double alpha2 = dot(inputs, weights[1]);
		double alpha3 = dot(inputs, weights[2]);
//		System.out.println("alpha1" + alpha1);

		double[] Layer2 = {sigmoid(alpha1) ,sigmoid(alpha2)  ,  1};
//		System.out.println(Arrays.toString(Layer2));
	//	System.out.println(Arrays.toString(weights[2]));
		
		
		double alphaB1 = dot(Layer2, weights[2]);
		double alphaB2 = dot(Layer2, weights[3]);
		
		double[] output = {sigmoid(alphaB1) ,sigmoid(alphaB2)};
		
//		System.out.println("output[0]" + output[0]);
//		System.out.println("output[1]" + output[1]);

		if(output[0] > output[1]) {
			return 1;
			
		}else if(output[0] < output[1]) {
			return -1;
		}else {
			return 0;
		}
	}
	
	
	
	
	public Rectangle getBounds() {
		return new Rectangle(x, Y, WIDTH, HEIGHT);
	}
	
	public int getTopY() {
		return Y;
	}
}